// createUser.js
import mongoose from "mongoose";
import bcrypt from "bcrypt";
import dotenv from "dotenv";
import User from "./src/models/user.model.js";

dotenv.config();

const createUser = async () => {
  try {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
    await mongoose.connect(process.env.MONGO_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });

    console.log("‚úÖ Connected to MongoDB");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω
    const existingAdmin = await User.findOne({ username: "admin2" });
    if (existingAdmin) {
      console.log("‚ÑπÔ∏è Admin already exists:", existingAdmin.username);
    } else {
      // –•—ç—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
      const hash = await bcrypt.hash("12345", 10);

      // –°–æ–∑–¥–∞—ë–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      const adminUser = new User({ username: "admin2", password: hash, role: "admin", status: "ready" });
      await adminUser.save();
      console.log("‚úÖ Admin user created:", adminUser.username);
    }
  } catch (err) {
    console.error("‚ùå Error creating user:", err.message);
  } finally {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    await mongoose.disconnect();
    console.log("üîå Disconnected from MongoDB");
    process.exit();
  }
};

createUser();
