import mongoose from "mongoose";
import dotenv from "dotenv";
import User from "./src/models/user.model.js";

dotenv.config();

const MONGO_URI = process.env.MONGO_URI || "mongodb+srv://ivanovivan91902:VtrfM7pRey9pN7kS@cluster0.lcaijhq.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0";

async function checkUsers() {
  try {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
    await mongoose.connect(MONGO_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    console.log("‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞");

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = await User.find({}, { password: 0 });
    
    console.log(`\nüìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
    
    if (users.length === 0) {
      console.log("‚ùå –í –±–∞–∑–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!");
      return;
    }

    console.log("\nüë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:");
    users.forEach((user, index) => {
      console.log(`${index + 1}. Username: ${user.username}`);
      console.log(`   Role: ${user.role}`);
      console.log(`   ID: ${user._id}`);
      console.log(`   Created: ${user.createdAt}`);
      console.log("---");
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª–∏
    const roles = [...new Set(users.map(u => u.role))];
    console.log(`\nüîë –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–æ–ª–∏: ${roles.join(', ')}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º writing-checker
    const writingCheckers = users.filter(u => u.role === 'writing-checker');
    if (writingCheckers.length === 0) {
      console.log("\n‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é 'writing-checker'");
      console.log("üí° –°–æ–∑–¥–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: npm run create-writing-checker");
    } else {
      console.log(`\n‚úÖ –ù–∞–π–¥–µ–Ω–æ writing-checker: ${writingCheckers.length}`);
      writingCheckers.forEach(user => {
        console.log(`   - ${user.username} (${user._id})`);
      });
    }

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", error);
  } finally {
    await mongoose.disconnect();
    console.log("\nüîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç MongoDB");
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkUsers();